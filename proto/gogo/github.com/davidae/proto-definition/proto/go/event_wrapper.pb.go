// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event_wrapper.proto

package _go

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GreetingWrapp struct {
	From                *types.StringValue `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	LastUpdated         *types.Timestamp   `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	To                  *types.StringValue `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	PublisherCategories []int32            `protobuf:"zigzag32,4,rep,packed,name=publisher_categories,json=publisherCategories,proto3" json:"publisher_categories,omitempty"`
	// Types that are valid to be assigned to Baz:
	//	*GreetingWrapp_BazNull
	//	*GreetingWrapp_BazValue
	Baz                  isGreetingWrapp_Baz `protobuf_oneof:"baz"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GreetingWrapp) Reset()         { *m = GreetingWrapp{} }
func (m *GreetingWrapp) String() string { return proto.CompactTextString(m) }
func (*GreetingWrapp) ProtoMessage()    {}
func (*GreetingWrapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_598b41a4843f2c76, []int{0}
}
func (m *GreetingWrapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreetingWrapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreetingWrapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreetingWrapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetingWrapp.Merge(m, src)
}
func (m *GreetingWrapp) XXX_Size() int {
	return m.Size()
}
func (m *GreetingWrapp) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetingWrapp.DiscardUnknown(m)
}

var xxx_messageInfo_GreetingWrapp proto.InternalMessageInfo

type isGreetingWrapp_Baz interface {
	isGreetingWrapp_Baz()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GreetingWrapp_BazNull struct {
	BazNull bool `protobuf:"varint,5,opt,name=baz_null,json=bazNull,proto3,oneof" json:"baz_null,omitempty"`
}
type GreetingWrapp_BazValue struct {
	BazValue int32 `protobuf:"varint,6,opt,name=baz_value,json=bazValue,proto3,oneof" json:"baz_value,omitempty"`
}

func (*GreetingWrapp_BazNull) isGreetingWrapp_Baz()  {}
func (*GreetingWrapp_BazValue) isGreetingWrapp_Baz() {}

func (m *GreetingWrapp) GetBaz() isGreetingWrapp_Baz {
	if m != nil {
		return m.Baz
	}
	return nil
}

func (m *GreetingWrapp) GetFrom() *types.StringValue {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GreetingWrapp) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *GreetingWrapp) GetTo() *types.StringValue {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GreetingWrapp) GetPublisherCategories() []int32 {
	if m != nil {
		return m.PublisherCategories
	}
	return nil
}

func (m *GreetingWrapp) GetBazNull() bool {
	if x, ok := m.GetBaz().(*GreetingWrapp_BazNull); ok {
		return x.BazNull
	}
	return false
}

func (m *GreetingWrapp) GetBazValue() int32 {
	if x, ok := m.GetBaz().(*GreetingWrapp_BazValue); ok {
		return x.BazValue
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GreetingWrapp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GreetingWrapp_BazNull)(nil),
		(*GreetingWrapp_BazValue)(nil),
	}
}

func init() {
	proto.RegisterType((*GreetingWrapp)(nil), "event.GreetingWrapp")
}

func init() { proto.RegisterFile("event_wrapper.proto", fileDescriptor_598b41a4843f2c76) }

var fileDescriptor_598b41a4843f2c76 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x18, 0x85, 0x9b, 0xb4, 0xe9, 0xd7, 0xcf, 0x2d, 0x03, 0x29, 0x43, 0x14, 0x20, 0x44, 0x4c, 0x19,
	0x4a, 0xc2, 0xcf, 0x0c, 0x43, 0x19, 0xe8, 0xc4, 0x10, 0xfe, 0x24, 0x96, 0xc8, 0x6e, 0x5c, 0xd7,
	0x92, 0x13, 0x47, 0xce, 0xeb, 0x22, 0xf5, 0x4a, 0xb8, 0x00, 0x2e, 0x86, 0x91, 0x4b, 0x40, 0xe5,
	0x46, 0x50, 0x92, 0xb6, 0x03, 0x2c, 0x6c, 0xd6, 0x39, 0xcf, 0x39, 0xc7, 0x7a, 0xd1, 0x90, 0x2e,
	0x68, 0x0e, 0xc9, 0x8b, 0xc2, 0x45, 0x41, 0x55, 0x58, 0x28, 0x09, 0xd2, 0xb6, 0x6a, 0xd1, 0x3d,
	0x62, 0x52, 0x32, 0x41, 0xa3, 0x5a, 0x24, 0x7a, 0x16, 0x01, 0xcf, 0x68, 0x09, 0x38, 0x2b, 0x1a,
	0xce, 0x1d, 0x00, 0x66, 0x6c, 0x93, 0x72, 0xbd, 0x9f, 0xf8, 0xba, 0xb4, 0x6c, 0xfc, 0xe3, 0x37,
	0x13, 0xed, 0xdc, 0x28, 0x4a, 0x81, 0xe7, 0xec, 0xa9, 0xb2, 0xec, 0x53, 0xd4, 0x99, 0x29, 0x99,
	0x39, 0x86, 0x6f, 0x04, 0xfd, 0xf3, 0x83, 0xb0, 0x29, 0x08, 0x37, 0x05, 0xe1, 0x1d, 0x28, 0x9e,
	0xb3, 0x47, 0x2c, 0x34, 0x8d, 0x6b, 0xd2, 0xbe, 0x44, 0x03, 0x81, 0x4b, 0x48, 0x74, 0x91, 0x62,
	0xa0, 0xa9, 0x63, 0xd6, 0x49, 0xf7, 0x57, 0xf2, 0x7e, 0xf3, 0xd3, 0xb8, 0x5f, 0xf1, 0x0f, 0x0d,
	0x6e, 0x8f, 0x90, 0x09, 0xd2, 0x69, 0xff, 0x61, 0xce, 0x04, 0x69, 0x9f, 0xa1, 0xbd, 0x42, 0x13,
	0xc1, 0xcb, 0x39, 0x55, 0xc9, 0x14, 0x03, 0x65, 0x52, 0x71, 0x5a, 0x3a, 0x1d, 0xbf, 0x1d, 0xec,
	0xc6, 0xc3, 0xad, 0x77, 0xbd, 0xb5, 0xec, 0x7d, 0xd4, 0x23, 0x78, 0x99, 0xe4, 0x5a, 0x08, 0xc7,
	0xf2, 0x8d, 0xa0, 0x37, 0x69, 0xc5, 0xff, 0x08, 0x5e, 0xde, 0x6a, 0x21, 0xec, 0x43, 0xf4, 0xbf,
	0x32, 0x17, 0xd5, 0x80, 0xd3, 0xf5, 0x8d, 0xc0, 0x9a, 0xb4, 0xe2, 0x8a, 0xaf, 0x27, 0xc7, 0x16,
	0x6a, 0x13, 0xbc, 0x1c, 0x5f, 0xbd, 0xaf, 0x3c, 0xe3, 0x63, 0xe5, 0x19, 0x9f, 0x2b, 0xcf, 0x78,
	0xfd, 0xf2, 0x5a, 0xcf, 0x23, 0xc6, 0x61, 0xae, 0x49, 0x38, 0x95, 0x59, 0x94, 0xe2, 0x05, 0x4f,
	0xf1, 0xfa, 0xc8, 0x27, 0x29, 0x9d, 0xf1, 0x9c, 0x03, 0x97, 0x79, 0x23, 0x44, 0x4c, 0x92, 0x6e,
	0xfd, 0xba, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x93, 0x8c, 0x47, 0x23, 0xda, 0x01, 0x00, 0x00,
}

func (m *GreetingWrapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreetingWrapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreetingWrapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Baz != nil {
		{
			size := m.Baz.Size()
			i -= size
			if _, err := m.Baz.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PublisherCategories) > 0 {
		dAtA1 := make([]byte, len(m.PublisherCategories)*5)
		var j2 int
		for _, num := range m.PublisherCategories {
			x3 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x3 >= 1<<7 {
				dAtA1[j2] = uint8(uint64(x3)&0x7f | 0x80)
				j2++
				x3 >>= 7
			}
			dAtA1[j2] = uint8(x3)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA1[:j2])
		i = encodeVarintEventWrapper(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventWrapper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventWrapper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventWrapper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GreetingWrapp_BazNull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreetingWrapp_BazNull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BazNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *GreetingWrapp_BazValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreetingWrapp_BazValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintEventWrapper(dAtA, i, uint64(m.BazValue))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func encodeVarintEventWrapper(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventWrapper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GreetingWrapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovEventWrapper(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovEventWrapper(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovEventWrapper(uint64(l))
	}
	if len(m.PublisherCategories) > 0 {
		l = 0
		for _, e := range m.PublisherCategories {
			l += sozEventWrapper(uint64(e))
		}
		n += 1 + sovEventWrapper(uint64(l)) + l
	}
	if m.Baz != nil {
		n += m.Baz.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GreetingWrapp_BazNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *GreetingWrapp_BazValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovEventWrapper(uint64(m.BazValue))
	return n
}

func sovEventWrapper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventWrapper(x uint64) (n int) {
	return sovEventWrapper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GreetingWrapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventWrapper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreetingWrapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreetingWrapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventWrapper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventWrapper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.StringValue{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventWrapper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventWrapper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventWrapper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventWrapper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.StringValue{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventWrapper
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.PublisherCategories = append(m.PublisherCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventWrapper
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEventWrapper
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEventWrapper
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PublisherCategories) == 0 {
					m.PublisherCategories = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventWrapper
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.PublisherCategories = append(m.PublisherCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherCategories", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BazNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Baz = &GreetingWrapp_BazNull{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BazValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Baz = &GreetingWrapp_BazValue{v}
		default:
			iNdEx = preIndex
			skippy, err := skipEventWrapper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEventWrapper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventWrapper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventWrapper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventWrapper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventWrapper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEventWrapper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEventWrapper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEventWrapper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventWrapper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEventWrapper = fmt.Errorf("proto: unexpected end of group")
)
